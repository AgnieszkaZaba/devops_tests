#!/usr/bin/env python3

from __future__ import annotations

import argparse
import os
from collections.abc import Sequence

import nbformat


def test_cell_contains_output(notebook):
    """checks if all notebook cells have an output present"""
    for cell in notebook.cells:
        if cell.cell_type == "code" and cell.source != "":
            assert cell.execution_count is not None


def test_no_errors_or_warnings_in_output(notebook):
    """checks if all example Jupyter notebooks have clear std-err output
    (i.e., no errors or warnings) visible; except acceptable
    diagnostics from the joblib package"""
    for cell in notebook.cells:
        if cell.cell_type == "code":
            for output in cell.outputs:
                if "name" in output and output["name"] == "stderr":
                    if not output["text"].startswith("[Parallel(n_jobs="):
                        raise AssertionError(output["text"])


def test_jupyter_utils_used_intead_of_matplotlib(notebooks):
    def test_show_plot_used_instead_of_matplotlib(notebook):
        """checks if plotting is done with open_atmos_jupyter_utils show_plot()"""
        matplot_used = False
        show_plot_used = False
        for cell in notebook.cells:
            if cell.cell_type == "code":
                if (
                    "pyplot.show()" in cell.source
                    or "plt.show()" in cell.source
                    or "from matplotlib import pyplot" in cell.source
                ):
                    matplot_used = True
                if "show_plot()" in cell.source:
                    show_plot_used = True
        if matplot_used and not show_plot_used:
            raise AssertionError(
                "if using matplotlib, please use open_atmos_jupyter_utils.show_plot()"
            )

    def test_show_anim_used_instead_of_matplotlib(notebook):
        """checks if animation generation is done with open_atmos_jupyter_utils show_anim()"""
        matplot_used = False
        show_anim_used = False
        for cell in notebook.cells:
            if cell.cell_type == "code":
                if (
                    "funcAnimation" in cell.source
                    or "matplotlib.animation" in cell.source
                    or "from matplotlib import animation" in cell.source
                ):
                    matplot_used = True
                if "show_anim()" in cell.source:
                    show_anim_used = True
        if matplot_used and not show_anim_used:
            raise AssertionError(
                """if using matplotlib for animations,
                please use open_atmos_jupyter_utils.show_anim()"""
            )


def test_jetbrains_bug_py_66491(notebook):
    """checks if all notebook have the execution_count key for each cell in JSON, which is required by GitHub renderer and may not be generated by some buggy PyCharm versions: https://youtrack.jetbrains.com/issue/PY-66491"""
    for cell in notebook.cells:
        if cell.cell_type == "code" and not hasattr(cell, "execution_count"):
            raise AssertionError(
                "Notebook cell missing execution_count attribute. (May be due to PyCharm bug, see: https://youtrack.jetbrains.com/issue/PY-66491 )"
            )
            return 1
    return 0


def main(argv: Sequence[str] | None = None) -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument("filenames", nargs="*", help="Filenames to check.")
    args = parser.parse_args(argv)

    retval = 0
    print(args.filenames)
    for filename in args.filenames:
        with open(filename, encoding="utf8") as notebook_file:
            notebook = nbformat.read(notebook_file, nbformat.NO_CONVERT)
            try:
                test_jetbrains_bug_py_66491(notebook)
                test_cell_contains_output(notebook)
                # retval |= test_no_errors_or_warnings_in_output(notebook)
            except Exception as e:
                print(e)
                retval = 1
    return retval


if __name__ == "__main__":
    raise SystemExit(main())
